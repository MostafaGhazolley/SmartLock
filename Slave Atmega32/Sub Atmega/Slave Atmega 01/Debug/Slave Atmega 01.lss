
Slave Atmega 01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  000001e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0f  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006dd  00000000  00000000  00000fc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000673  00000000  00000000  000016a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001d18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ff  00000000  00000000  00001e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009fe  00000000  00000000  00002223  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002c21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  8a:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_SlaveInit>:
void LCD_Pass_Req02(unsigned char Key)
{
	if (Key !=DEFAULT_KEYPRESSED && j!=6){ //0xFF is the default return if no key pressed...
		send_a_character(Key);
		_delay_ms(50);
		j++;
  92:	be 9a       	sbi	0x17, 6	; 23
  94:	87 b3       	in	r24, 0x17	; 23
  96:	8f 74       	andi	r24, 0x4F	; 79
  98:	87 bb       	out	0x17, r24	; 23
  9a:	80 e4       	ldi	r24, 0x40	; 64
  9c:	8d b9       	out	0x0d, r24	; 13
  9e:	08 95       	ret

000000a0 <SPI_Transmitter>:
  a0:	8f b9       	out	0x0f, r24	; 15
  a2:	77 9b       	sbis	0x0e, 7	; 14
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <SPI_Transmitter+0x2>
  a6:	8f b1       	in	r24, 0x0f	; 15
  a8:	08 95       	ret

000000aa <send_a_command>:
  aa:	92 b3       	in	r25, 0x12	; 18
  ac:	9f 70       	andi	r25, 0x0F	; 15
  ae:	28 2f       	mov	r18, r24
  b0:	20 7f       	andi	r18, 0xF0	; 240
  b2:	92 2b       	or	r25, r18
  b4:	92 bb       	out	0x12, r25	; 18
  b6:	90 98       	cbi	0x12, 0	; 18
  b8:	91 9a       	sbi	0x12, 1	; 18
  ba:	32 e0       	ldi	r19, 0x02	; 2
  bc:	3a 95       	dec	r19
  be:	f1 f7       	brne	.-4      	; 0xbc <send_a_command+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <send_a_command+0x18>
  c2:	91 98       	cbi	0x12, 1	; 18
  c4:	ef e8       	ldi	r30, 0x8F	; 143
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <send_a_command+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <send_a_command+0x24>
  ce:	00 00       	nop
  d0:	22 b3       	in	r18, 0x12	; 18
  d2:	2f 70       	andi	r18, 0x0F	; 15
  d4:	f0 e1       	ldi	r31, 0x10	; 16
  d6:	8f 9f       	mul	r24, r31
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	82 2b       	or	r24, r18
  de:	82 bb       	out	0x12, r24	; 18
  e0:	91 9a       	sbi	0x12, 1	; 18
  e2:	32 e0       	ldi	r19, 0x02	; 2
  e4:	3a 95       	dec	r19
  e6:	f1 f7       	brne	.-4      	; 0xe4 <send_a_command+0x3a>
  e8:	00 c0       	rjmp	.+0      	; 0xea <send_a_command+0x40>
  ea:	91 98       	cbi	0x12, 1	; 18
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9c e9       	ldi	r25, 0x9C	; 156
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <send_a_command+0x46>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <send_a_command+0x4c>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_Init>:
  fa:	81 b3       	in	r24, 0x11	; 17
  fc:	80 6f       	ori	r24, 0xF0	; 240
  fe:	81 bb       	out	0x11, r24	; 17
 100:	88 9a       	sbi	0x11, 0	; 17
 102:	89 9a       	sbi	0x11, 1	; 17
 104:	2f e7       	ldi	r18, 0x7F	; 127
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	91 e0       	ldi	r25, 0x01	; 1
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <LCD_Init+0x10>
 112:	00 c0       	rjmp	.+0      	; 0x114 <LCD_Init+0x1a>
 114:	00 00       	nop
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	0e 94 55 00 	call	0xaa	; 0xaa <send_a_command>
 11c:	88 e2       	ldi	r24, 0x28	; 40
 11e:	0e 94 55 00 	call	0xaa	; 0xaa <send_a_command>
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	0e 94 55 00 	call	0xaa	; 0xaa <send_a_command>
 128:	86 e0       	ldi	r24, 0x06	; 6
 12a:	0e 94 55 00 	call	0xaa	; 0xaa <send_a_command>
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	0e 94 55 00 	call	0xaa	; 0xaa <send_a_command>
 134:	08 95       	ret

00000136 <main>:

int main(void)
{
	unsigned char SSS=0;
	unsigned char counter=0;
	SPI_SlaveInit();
 136:	0e 94 49 00 	call	0x92	; 0x92 <SPI_SlaveInit>
    while (1) 
    {
/****************************LCD TESTING OUTPUT*********************************/
		LCD_Init();
 13a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Init>
/***************************** SPI COMMUNICATION ************************************/
		SPI_SlaveInit();
 13e:	0e 94 49 00 	call	0x92	; 0x92 <SPI_SlaveInit>
 142:	c0 e0       	ldi	r28, 0x00	; 0
 144:	d0 e0       	ldi	r29, 0x00	; 0
		for(counter=0;counter<6;counter++)
		{	
			REC_PASS[counter]=SPI_Transmitter('y'); //Receiving 6 digits from Master Controller
 146:	89 e7       	ldi	r24, 0x79	; 121
 148:	0e 94 50 00 	call	0xa0	; 0xa0 <SPI_Transmitter>
 14c:	fe 01       	movw	r30, r28
 14e:	e0 5a       	subi	r30, 0xA0	; 160
 150:	ff 4f       	sbci	r31, 0xFF	; 255
 152:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 154:	8f e0       	ldi	r24, 0x0F	; 15
 156:	97 e2       	ldi	r25, 0x27	; 39
 158:	01 97       	sbiw	r24, 0x01	; 1
 15a:	f1 f7       	brne	.-4      	; 0x158 <main+0x22>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <main+0x28>
 15e:	00 00       	nop
 160:	21 96       	adiw	r28, 0x01	; 1
    {
/****************************LCD TESTING OUTPUT*********************************/
		LCD_Init();
/***************************** SPI COMMUNICATION ************************************/
		SPI_SlaveInit();
		for(counter=0;counter<6;counter++)
 162:	c6 30       	cpi	r28, 0x06	; 6
 164:	d1 05       	cpc	r29, r1
 166:	79 f7       	brne	.-34     	; 0x146 <main+0x10>
 168:	e8 cf       	rjmp	.-48     	; 0x13a <main+0x4>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
